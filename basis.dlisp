fun null?(xs) = xs == nil;

check_expect(null?(nil), #t);
check_expect(null?('[1 2 3]), #f);

fun bingte(a,b) = not(a < b);
fun binlte(a,b) = not(a > b);

fun max(a,b) = if a > b then a else b;
fun min(a,b) = if a < b then a else b;

fun foldl(f, acc, xs) =
  if null?(xs)
  then acc
  else foldl(f, f(car(xs), acc), cdr(xs));

fun cadr(xs) = [car [cdr xs]];

fun vartimes(...) = foldl(bintimes, 1, ...);
fun fac(n) = apply(vartimes, range(1, n+1));

fun range(start, fin) =
  if start > fin or start == fin
  then nil
  else cons(start, range(start+1, fin));

fun filter(p?, xs) =
  if null?(xs)
  then nil
  else
    if p?(car(xs))
    then cons(car(xs), filter(p?, cdr(xs)))
    else filter(p?, cdr(xs));

fun length(xs) =
  if null?(xs) then 0 else 1+length(cdr(xs));

fun take(n, xs) =
  if n<1 then nil else cons(car(xs), take(n-1, cdr(xs)));

fun drop(n, xs) =
  if n<1 then xs else drop(n-1, cdr(xs));

fun merge(xs, ys) =
  if null?(xs)
  then ys
  else if null?(ys)
  then xs
  else
    if car(xs) < car(ys)
    then cons(car(xs), merge(cdr(xs), ys))
    else cons(car(ys), merge(xs, cdr(ys)));

fun mergesort(xs) =
  if null?(xs) or null?(cdr(xs))
  then xs
  else
    let* val size = length(xs),
         val half = size/2,
         val fsthalf = take(half, xs),
         val sndhalf = drop(half, xs)
    in
      merge(mergesort(fsthalf), mergesort(sndhalf))
    end;

fun quit() = 'quit;
fun q() = quit();

fun o(f,g) = fn(x) = f(g(x));

fun currytwo(f) = fn(x) = fn(y) = f(x,y);

fun reverse(xs) =
    let fun revapp(ys,acc) =
               if null?(ys)
               then acc
               else revapp(cdr(ys), cons(car(ys), acc))
    in
         revapp(xs, nil)
    end;

fun list(...) = reverse(foldl(cons, nil, ...));
